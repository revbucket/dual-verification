"""
General script structure:
1. Loads the network
2. Loops through some examples, according to the command line arguments
    a. Run optprox
    b. Run explp
    c. Run anderson1cut
    d. Run lp
    e. Run decomp2d
    f. Run decomp2d_mip
    LAST LAYER ONLY FOR ALL THE THINGS^^^^

    g. Save these to a file, based on the example id (making LOTS of examples)

"""
import time
import experiment_utils as eu
import argparse
import pickle
import pprint
import glob
import utilities as utils

parser = argparse.ArgumentParser()
# usage: python -m scripts.mnist_ffnet 0 10 0.1
parser.add_argument('start_idx', type=int)
parser.add_argument('end_idx', type=int)
parser.add_argument('eps', type=float, default=0.1)

args = parser.parse_args()
assert args.start_idx < args.end_idx
print(args)


####################################################
<<<<<<< HEAD
=======
PREFIX = 'exp_data/mnist_deep/'
def filenamer(idx):
    return PREFIX + str(idx) + '.pkl'



>>>>>>> 694b9ee3a39694fc18df09dfed006e8b8be70e57

def decomp_2d_mip(bin_net, test_input):
    start_time = time.time()
    decomp_obj= eu.decomp_2d_MNIST_PARAMS(bin_net, test_input, return_obj=True)
    decomp_obj.merge_partitions(partition_dim={1:2, 3:2, 5:2, 7: 2, 9:20, 11: 1})
    return decomp_obj.lagrangian().item(), time.time() - start_time


def write_file(idx, output_dict):
<<<<<<< HEAD
    PREFIX = 'exp_data/mnist_deep_'
    with open(PREFIX + str(idx) + '.pkl', 'wb') as f:
=======
    with utils.safe_open(filenamer(idx), 'wb') as f:
>>>>>>> 694b9ee3a39694fc18df09dfed006e8b8be70e57
        pickle.dump(output_dict, f)



<<<<<<< HEAD
################ MAIN SCRIPT ######################################################3
=======
################ MAIN SCRIPT #####git #################################################3
>>>>>>> 694b9ee3a39694fc18df09dfed006e8b8be70e57



mnist_deep = eu.load_mnist_deep_net()

for idx in range(args.start_idx, args.end_idx):
    print('Handling MNIST example %s' % idx)


    bin_net, test_input = eu.setup_mnist_example(mnist_deep, idx, args.eps)


    if bin_net is None:
        print("Skipping example %s : incorrect model" % idx)
        continue


<<<<<<< HEAD
    output_dict = {}
    output_dict['decomp_2d'] = eu.decomp_2d_MNIST_PARAMS(bin_net, test_input)
    output_dict['decomp_mip'] = decomp_2d_mip(bin_net, test_input)

    output_dict['optprox'] = eu.run_optprox(bin_net, test_input, use_intermed=True)
    output_dict['explp'] = eu.run_explp(bin_net, test_input, use_intermed=True)
    output_dict['anderson'] = eu.run_anderson_1cut(bin_net, test_input, use_intermed=True)
    output_dict['lp'] = eu.run_lp(bin_net, test_input, use_intermed=True)

=======
    if len(glob.glob(filenamer(idx))) >= 1:
        print("Skipping example %s: file already exists" % idx)
        continue


    output_dict = {}
    for k, method in {'decomp_2d': eu.decomp_2d_MNIST_PARAMS,
                      'decomp_mip': decomp_2d_mip,
                      'optprox': eu.run_optprox,
                      'explp': eu.run_explp,
                      'anderson': eu.run_anderson_1cut,
                      'lp': eu.run_lp}.items():
        try:
            output_dict[k] = method(bin_net, test_input)
        except:
            print("WARNING: %s FAILED ON EXAMPLE %s" % (k, idx))
>>>>>>> 694b9ee3a39694fc18df09dfed006e8b8be70e57


    pprint.pprint(output_dict)
    write_file(idx, output_dict)


